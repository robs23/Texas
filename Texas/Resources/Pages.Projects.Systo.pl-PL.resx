<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CRM" xml:space="preserve">
    <value>Zarządzanie relacjami z klientami</value>
  </data>
  <data name="CRM-text" xml:space="preserve">
    <value>Nie ma biznesu oddzielonego od innych firm i aby być konkurencyjnym, trzeba nauczyć się profesjonalnie zarządzać swoimi relacjami. Moduł CRM aplikacji jest świetnym miejscem do rozpoczęcia. Wszyscy użytkownicy przestrzeni roboczej mogą prowadzić rejestr firm, z którymi pracują, bezpiecznie przechowując ich adres oraz ich dane kontaktowe i finansowe.</value>
  </data>
  <data name="HR" xml:space="preserve">
    <value>Dane pracowników pod kontrolą</value>
  </data>
  <data name="HR-text" xml:space="preserve">
    <value>Użytkownik może stworzyć nieograniczoną liczbę pracowników w swojej przestrzeni roboczej. Może on wypełnić wszystkie informacje dotyczące pracownika, takie jak imię i nazwisko, datę urodzenia, obywatelstwo, datę zatrudnienia, rodzaj umowy, numer podatkowy a także dane kontaktowe pracownika. Dzięki temu będzie miał łatwy dostęp do wszystkich informacji w razie potrzeby. Użytkownik może również tworzyć grupy pracowników do wiązania pracowników, np. pełniących podobne role w firmie. Wszyscy stworzeni pracownicy są dostępni wszędzie w obrębie aplikacji, więc na przykład użytkownik może później przypisać pracownika jako kierowcę do zlecenia transportowego.</value>
  </data>
  <data name="Logistics" xml:space="preserve">
    <value>Zarządzanie flotą i zlecenia transportowe</value>
  </data>
  <data name="Logistics-text" xml:space="preserve">
    <value>Podstawową funkcjonalnością aplikacji w jej obecnym stanie jest zarządzanie zleceniami transportowymi. Użytkownik może dodać zlecenie transportowe, realizowane zarówno za pomocą własnej floty firmy, jak i podwykonawcy. Każde zamówienie musi mieć punkt początkowy i końcowy, ale możliwe jest również utworzenie niezliczonej liczby punktów pośrednich. Użytkownik może wybrać kierowcę i ciężarówkę z zasobów własnych firmy lub spedytora w przypadku zleceń podwykonawstwa.</value>
  </data>
  <data name="Modular" xml:space="preserve">
    <value>Modułowa budowa</value>
  </data>
  <data name="Modular-text" xml:space="preserve">
    <value>Aplikacja składa się z modułów odpowiadających sferom działania typowej firmy. Każdy moduł zawiera funkcje zwykle związane ze sferą działania, którą reprezentuje. Na przykład moduł &lt;i&gt;HR&lt;/i&gt; zawiera funkcje związane z zarządzaniem pracownikami, a moduł &lt;i&gt;Logistyka&lt;/i&gt; koncentruje się głównie na kwestiach związanych z transportem.</value>
  </data>
  <data name="Multitenant" xml:space="preserve">
    <value>Obsługa wielu użytkowników</value>
  </data>
  <data name="Multitenant-text" xml:space="preserve">
    <value>Rejestrując się bezpośrednio w aplikacji, użytkownik A tworzy wyjątkową przestrzeń roboczą dla niego i jego współpracowników. Aby umożliwić dzielenie danych ze współpracownikami, użytkownik zaprasza ich za pomocą adresów e-mail. E-mail zostanie wysłany wraz ze spersonalizowanym odnośnikiem do rejestracji, gdy zaproszony użytkownik B zarejestruje się przy jego użyciu, zostanie automatycznie przypisany do przestrzeni roboczej użytkownika A. Liczba użytkowników w jednej przestrzeni roboczej jest nieograniczona, a wszystkie utworzone dane są dostępne dla wszystkich użytkowników tej przestrzeni. Liczba przestrzeni roboczych jest również nieograniczona i żadne dane nie są dzielone między dwoma różnymi przestrzeniami</value>
  </data>
</root>