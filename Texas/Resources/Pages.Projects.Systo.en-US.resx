<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CRM" xml:space="preserve">
    <value>Customer relationship management</value>
  </data>
  <data name="CRM-text" xml:space="preserve">
    <value>There's no business separated from other companies and to be competitive, one needs to learn how to manage its relationships professionally. CRM module of the application is great place to start. All users of the work space can keep track of the companies they work with, securely stroring their address,contact and financial data. </value>
  </data>
  <data name="HR" xml:space="preserve">
    <value>Employees' data under control</value>
  </data>
  <data name="HR-text" xml:space="preserve">
    <value>User can create as many employees of his work space as he wants. He can fill in all employee-specific information like name, birthday, nationality, employment date, type of contract, tax number and employee's contact details. Thanks to that he'll have easy access to all the information when needed. The user can also create employee groups to bind employees e.g. of similar role within the company. All created employees are accessable everywhere within the application, so for example the user can later assign an employee as a driver to transport order.</value>
  </data>
  <data name="Logistics" xml:space="preserve">
    <value>Fleet management &amp; transport orders</value>
  </data>
  <data name="Logistics-text" xml:space="preserve">
    <value>The core functionality of the application in its current state is management of transport orders. The user can add transport order, both executed with company's own fleet or by subcontractor. Every order has to have start point and end point, but it's possible to create countless number of intermediate points. The user can choose a driver and a truck from company's own resources, or forwared in case of subcontracted orders.</value>
  </data>
  <data name="Modular" xml:space="preserve">
    <value>Modular construction</value>
  </data>
  <data name="Modular-text" xml:space="preserve">
    <value>The application consists of modules corresponding to spheres of operation of typical company. Every module contains features typically associated to the sphere of operation it represents. For instance, &lt;i&gt;HR&lt;/i&gt; module contains functions related to employee management and &lt;i&gt;Logistics&lt;/i&gt; module concentrates mostly on transport matters.</value>
  </data>
  <data name="Multitenant" xml:space="preserve">
    <value>Multitenancy</value>
  </data>
  <data name="Multitenant-text" xml:space="preserve">
    <value>By registering directly in the application, the user A creates a unique work space for him and his work mates. In order to share data with his coleagues, the user invites them by their e-mail addresses. An e-mail is sent with personalized registration link, when the invited user B registers using it, he'll be autimatically assingned to user A's work space. The number of users within a single work space is limitless and all created data is accessable for all users of the work space. The number of work spaces is also limitless and no data is shared between two different work spaces.</value>
  </data>
  <data name="Reporting" xml:space="preserve">
    <value>Reporting</value>
  </data>
  <data name="Reporting-text" xml:space="preserve">
    <value />
  </data>
</root>